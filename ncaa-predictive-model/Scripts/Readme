This contains various python scripts used to clean and organize data as well as train/test models.  Descriptions are written in order of the data pipeline

### create_training_dataset.py

Generates the final training dataset used for model development by merging team stats and historical tournament matchups.

Steps:
- Loads season-level stats and NCAA tournament matchups
- Merges team stats into matchups for both winning and losing teams
- Computes stat differences (Team1 − Team2) for all numeric features
- Duplicates matchups with flipped teams and inverted outcomes
- Outputs a clean CSV with:
  - `Season`, `TeamID1`, `TeamID2`, `Win`
  - All stat difference columns (e.g., `PPG_Diff`, `OffRtg_Diff`, etc.)

This script ensures the model learns from both perspectives of every game and has balanced training labels.


### Evaluate_XGBoost.py

This script evaluates the performance of a pre-trained XGBoost model on historical NCAA tournament data.

It performs the following steps:
- Loads a cleaned dataset of past matchups and win outcomes
- Drops selected columns to simulate different model feature sets
- Splits the data into training and testing subsets
- Loads a pre-trained XGBoost model from disk (can change depending on which model needs to be used)
- Calculates probability predictions for each matchup
- Reports final model performance metrics:
  - Accuracy
  - Brier Score
  - Log Loss

This script helps identify the optimal decision threshold and assess the model’s calibration and reliability.

### predict_matchups.py

Generates matchup predictions using a specified XGBoost model and matchup dataset.

Steps performed:
- Loads whatever model is desired (change file path)
- Loads a 2025 tournament prediction dataset (without outcome labels)
- Renames or drops columns to align with the model’s expected features (depending on which model was selected)
- Validates feature compatibility between model and dataset
- Generates win probabilities for each matchup
- Outputs a CSV with `TeamID1`, `TeamID2`, and predicted `Win_Probability`

This script is designed for generating real-time tournament predictions once the bracket is known.

To use:
- Update the file path to your desired model `.pkl` file
- Provide a CSV containing `TeamID1`, `TeamID2`, and all required features
- The script will:
  - Align the dataset’s features with the model
  - Predict the probability that `TeamID1` wins each matchup
  - Output a CSV with `TeamID1`, `TeamID2`, and `Win_Probability`

### select_high_confidence_predictions.py

Combines multiple model outputs to select the most confident prediction for each matchup.

Steps:
- Loads prediction files from 5 different models
- Uses a specified "main model" to define the predicted winner
- Compares each matchup across models
- If another model agrees on the winner **and** has higher confidence, its prediction is used
- Generates a final CSV with adjusted predictions

Useful for going big or going home and attempting to get the best possible brier score I can.


### prepare_kaggle_submission.py

Final step in the modeling pipeline. Prepares a valid Kaggle submission file by:

- Loading model-generated predictions for both Men's and Women's tournaments
- Loading Kaggle template files with placeholder matchups
- Replacing template values (0.5) with real model probabilities where available (the kaggle competition required a predictoin of all potential matchups in the NCAA, but my model only predicted the tourney matchups)
- Concatenating all predictions into a single CSV 
- Saving the result for upload

Used to create the official `submission.csv` file for the Kaggle competition.



